#!/bin/sh
##############################################################################
## This file is part of 'axi-soc-ultra-plus-core'.
## It is subject to the license terms in the LICENSE.txt file found in the
## top-level directory of this distribution and at:
##    https://confluence.slac.stanford.edu/display/ppareg/LICENSE.html.
## No part of 'axi-soc-ultra-plus-core', including this file,
## may be copied, modified, propagated, or distributed except according to
## the terms contained in the LICENSE.txt file.
##############################################################################

# Make the boot and app
mkdir -p /boot
mkdir -p /app

# Standard SD-memory[0] card interface
if [ -e /dev/mmcblk0 ]
then
   mount /dev/mmcblk0p1 /boot > /dev/null 2>&1
   mount /dev/mmcblk0p2 /app
fi

##############################################################################

# Standard SD-memory[1] card interface
if [ -e /dev/mmcblk1 ]
then
   mount /dev/mmcblk1p1 /boot > /dev/null 2>&1
   mount /dev/mmcblk1p2 /app
fi

##############################################################################

# KR260 using USB mounted SD-memory card
if [ -e /dev/sda ]
then
   mount /dev/sda1 /boot > /dev/null 2>&1
   mount /dev/sda2 /app
fi

##############################################################################

# Ensure persistent SSH keys are used
mkdir -p /boot/ssh
if [ ! -f /boot/ssh/ssh_host_ed25519_key ]; then
   # echo "Generating new SSH host keys..."
   ssh-keygen -A
   mv /etc/ssh/ssh_host_* /boot/ssh/
fi

# Copy all SSH host keys from persistent storage to rootfs
for keyfile in /boot/ssh/ssh_host_*; do
   link_path="/etc/ssh/$(basename "$keyfile")"
   if [ ! -L "$link_path" ] || [ "$(readlink "$link_path")" != "$keyfile" ]; then
      cp -f "$keyfile" "$link_path"
      # echo "Copied $keyfile to $link_path"
      chmod 600 /etc/ssh/ssh_host_*
      chown root:root /etc/ssh/ssh_host_*
   fi
done

# Restarting SSH service
/usr/sbin/sshd

##############################################################################

# Check if mac file exists in SD boot partition
if [ -f "/boot/mac" ]
then
   # Set the MAC address with file
   ip link set dev eth0 down
   ip link set dev eth0 address $(cat /boot/mac)
   ip link set dev eth0 up
   /etc/init.d/networking restart
fi

# Check if ip file exists in SD boot partition
if [ -f "/boot/ip" ]
then
   # Set the IP address with file
   ip addr add $(cat /boot/ip)/24 dev eth0
fi

##############################################################################

# Check if drivers already load before loading 2nd stage bitstream
if [ -f "/proc/axi_stream_dma_0" ]
then
   # Kill any stale runtime applications
   killall jupyter > /dev/null 2>&1
   killall python3 > /dev/null 2>&1
   sleep 5
   # Remove kernel drivers in-case they are already loaded
   rmmod -s axi_memory_map
   rmmod -s axi_stream_dma
fi

##############################################################################

# Load the user's firmware (PL) .bit file (A.K.A. "2nd stage boot")
if [ -f "/boot/system.bit" ]
then
   # fpgautil is "flaky" command and sometimes needs multiple retries to be successful
   while [ ! -z "$(fpgautil -b /boot/system.bit | grep failed)" ]
   do
      sleep 1
   done
   echo "/sys/class/fpga_manager/fpga0/state: $(cat /sys/class/fpga_manager/fpga0/state)"
fi

# Load custom kernel driver
insmod /lib/modules/$(uname -r)/updates/axi_memory_map.ko
insmod /lib/modules/$(uname -r)/updates/axi_stream_dma.ko

##############################################################################

# Dump AxiVersion Status
/usr/bin/axiversiondump

# Check if user's runtime application exists
if [ -f "/app/runtimeApp" ]
then
   echo "Starting the user's custom runtime Application (/app/runtimeApp)"
   /app/runtimeApp
else
   echo "Starting the generic rogue TCP bridge Application"
   /usr/bin/roguetcpbridge
fi

##############################################################################
